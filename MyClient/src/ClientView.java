
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Polina
 */
public class ClientView extends javax.swing.JFrame {

    String iD;
    String clientID = "";
    DataOutputStream dout;
    DataInputStream din;
    DefaultListModel usersListModel;

    /**
     * Creates new form ClientView
     */
    public ClientView() {
        initComponents();
    }

    public ClientView(String id, Socket s) {
        this.iD = id;
        try {
            initComponents();
            try {
                setIconImage(ImageIO.read(new File("../img/msg.png")));
                setTitle("ChatApp");
            } catch (IOException e) {
                e.printStackTrace();
            }

            usersListModel = new DefaultListModel();
            usersIdList.setModel(usersListModel);
            clientIdLabel.setText(id);
            din = new DataInputStream(s.getInputStream());
            dout = new DataOutputStream(s.getOutputStream());
            new Read().start();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    class Read extends Thread { //класс для получения списка id пользовательлей от  сервера

        @Override
        public void run() {
            while (true) {
                try {
                    String msgFromServer = din.readUTF();
                    if (msgFromServer.contains("===userIds===")) { //в сообщении присутствуют данные символы,то мы понимаем, что это то самое сообщение со списким id  от сервера
                        msgFromServer = msgFromServer.substring(13); // обрезаем ===userIds=== из пришедшего списка id
                        usersListModel.clear();
                        StringTokenizer st = new StringTokenizer(msgFromServer, ","); // разделяем имена по запятой и добавляем в конец usersListModel
                        while (st.hasMoreTokens()) {
                            String buffID = st.nextToken();
                            if (!iD.equals(buffID)) { //если пришедшее id не совпадает с id  данного пользователя, то добавляем его в usersListModel
                                usersListModel.addElement(buffID);
                            }
                        }
                    } else {// если же в сообщении НЕ присутствуют данные символы "===userIds==="? печатаем на стороне клиента вот 
                        clientChatArea.append(msgFromServer + "\n");//в инном случае напечатать сообщение от другого пользователя
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                    break;
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelYou = new javax.swing.JLabel();
        clientIdLabel = new javax.swing.JLabel();
        selectAllButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientChatArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        clientMessageArea = new java.awt.TextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        usersIdList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client Chat");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(400, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(45, 40, 62));
        jPanel1.setMaximumSize(new java.awt.Dimension(1920, 1080));
        jPanel1.setMinimumSize(new java.awt.Dimension(400, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 300));
        jPanel1.setRequestFocusEnabled(false);

        labelYou.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        labelYou.setForeground(new java.awt.Color(128, 43, 177));
        labelYou.setText("You:");

        clientIdLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        clientIdLabel.setForeground(new java.awt.Color(209, 215, 224));
        clientIdLabel.setText(".......................");

        selectAllButton.setBackground(new java.awt.Color(86, 79, 111));
        selectAllButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        selectAllButton.setForeground(new java.awt.Color(209, 215, 224));
        selectAllButton.setText("Select All");
        selectAllButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        clientChatArea.setEditable(false);
        clientChatArea.setColumns(20);
        clientChatArea.setRows(5);
        jScrollPane1.setViewportView(clientChatArea);

        sendButton.setBackground(new java.awt.Color(86, 79, 111));
        sendButton.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        sendButton.setForeground(new java.awt.Color(209, 215, 224));
        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        clientMessageArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientMessageAreaActionPerformed(evt);
            }
        });

        usersIdList.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        usersIdList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                usersIdListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(usersIdList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelYou, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clientMessageArea, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAllButton)
                    .addComponent(labelYou, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clientMessageArea, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void clientMessageAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientMessageAreaActionPerformed
        try {
            String messageToServer = clientMessageArea.getText(); // посылаемое соообщение серверу
            if (!messageToServer.equals("") && !messageToServer.isEmpty()) {
                String messageText = messageToServer;// сообщение, которое увидят пользователи
                String receivingClientID = clientID; //ID клиента, которому посылаем

                if (!clientID.isEmpty()) { //если clientID (тот один, кому мы хотим послать сообщение) не пуст "", то посылаем
                    messageToServer = "Sending to one person" + receivingClientID + ":" + messageText;
                    dout.writeUTF(messageToServer);
                    clientMessageArea.setText("");
                    clientChatArea.append("< YOU to " + receivingClientID + " > " + messageText + "\n");
                } else {
                    messageToServer = "Sending to All" + messageText;
                    dout.writeUTF(messageToServer);
                    clientMessageArea.setText("");
                    clientChatArea.append("< YOU to All >" + messageText + "\n");
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "User does not exist anymore.");
        }
    }//GEN-LAST:event_clientMessageAreaActionPerformed

    private void usersIdListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_usersIdListValueChanged
        clientID = (String) usersIdList.getSelectedValue();
    }//GEN-LAST:event_usersIdListValueChanged

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        clientID = "";
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        String i = "I am disconnecting";
        try {
            dout.writeUTF(i);
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        try {
            String messageToServer = clientMessageArea.getText(); // посылаемое соообщение серверу
            if (!messageToServer.equals("") && !messageToServer.isEmpty()) {
                String messageText = messageToServer;// сообщение, которое увидят пользователи
                String receivingClientID = clientID; //ID клиента, которому посылаем

                if (!clientID.isEmpty()) { //если clientID (тот один, кому мы хотим послать сообщение) не пуст "", то посылаем
                    messageToServer = "Sending to one person" + receivingClientID + ":" + messageText;
                    dout.writeUTF(messageToServer);
                    clientMessageArea.setText("");
                    clientChatArea.append("< YOU to " + receivingClientID + " > " + messageText + "\n");
                } else {
                    messageToServer = "Sending to All" + messageText;
                    dout.writeUTF(messageToServer);
                    clientMessageArea.setText("");
                    clientChatArea.append("< YOU to All >" + messageText + "\n");
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, " User does not exist anymore.");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the comessageTextand line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea clientChatArea;
    private javax.swing.JLabel clientIdLabel;
    private java.awt.TextField clientMessageArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelYou;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JList<String> usersIdList;
    // End of variables declaration//GEN-END:variables

}
